<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textBox10.Text" xml:space="preserve">
    <value>Agora você irá criar o método getstats(ref element e).

Esse método será responsável por popular os dados da struct element (tanto me quanto tar) com base na leitura de pixels coloridos renderizados pelo addon.

Ele também deve atualizar a classe personalizada da sua classe (ex: palatable) com os valores lidos dos pixels — incluindo buffs ativos, debuffs, cooldowns, flags de alcance e status defensivos. Todas essas informações vêm codificadas nos canais RGB de 16 pixels gerados pelo addon.

🧩 Regras de leitura dos pixels
Cada pixel contém 3 canais (R, G, B), cada um com valor de 0 a 255.

Cada canal pode conter:

valores diretos (ex: porcentagem de vida = G do pixel 0)

bitflags (ex: debuffs, buffs, status)

codificações múltiplas (ex: X e Y usam decimais em canais separados)

🧠 Considerações:
Use a função readpixels(pixels) para popular a lista pixels.

Sempre verifique se pixels.Count é suficiente antes de acessar cada índice.

Caso não use paladino, substitua o uso de palatable por sua própria classe de status da classe que você criou (ex: warlockable, shamable, etc.).

O método será chamado tanto para me quanto para tar, mas as leituras específicas de tar já estão na lógica. Siga esse padrão.

Exemplo: Método getstats(ref element e) para classe palatable:

// --------------------------------
// M16 - MÉTODO GETSTATS - CAPTURA STATUS DO PERSONAGEM
// --------------------------------
public void getstats(ref element e)
{
readpixels(pixels);
	 // HP (green) e MORREU (blue=255)
	 int v_hp = (pixels[0].g * 100) / 255;          // G do pixel[0] convertido para % (vida do player)
	 e.hp = v_hp;                                   // atualiza hp do player
	 e.morreu = (pixels[0].b &gt; 200);                // morreu se canal azul indica (target está morto)
	 tb_hp.Text = v_hp.ToString();                  // se debug ativo, mostra no textbox
	 e.autoattack = (pixels[0].r &gt; 250);            // autoattack está ativado se R &gt; 250
	 cb_autoattack.Checked = e.autoattack;          // atualiza checkbox de debug


	 // ------------------------------------------
	 // Pixel 1 - Mana (canal B) / Bags (canal R) / Erros de combate (canal G)
	 // ------------------------------------------

	 // MANA
	 int v_mana = (pixels[1].b * 100) / 255;           // canal B (0–255) convertido em porcentagem
	 e.mana = v_mana;                                  // atualiza atributo de mana
	 tb_mana.Text = v_mana.ToString();                 // exibe no textbox (debug)

	 // SLOTS LIVRES NAS BAGS
	 int v_slots = 255 - pixels[1].r;                  // canal R invertido → slots livres reais
	 e.freeslots = v_slots;                            // atualiza slots livres

	 // ERROS DE COMBATE (bitmask no canal G)
	 int g = pixels[1].g;                              // canal G codifica erros combinados
	 e.wrongway = (g &amp; 128) &gt; 0;                     // 128 = "You are facing the wrong way!"
	 e.outofrange = (g &amp; 64) &gt; 0;                     //  64 = "Out of range" ou "You are too far away!"
	 
	 


	 // ------------------------------------------
	 // Pixel 3 e 4
	 // ------------------------------------------

	 // X
	 int dez_x = (int)Math.Round(pixels[2].r / 25.0);     // R = dezena × 25
	 int uni_x = (int)Math.Round(pixels[2].b / 25.0);     // B = unidade × 25
	 int dec_x = (int)Math.Round(pixels[2].g / 2.5);      // G = decimal × 2.5
	 int final_x = (dez_x * 10 + uni_x) * 100 + dec_x;    // X = (dezena*10 + unidade)*100 + decimal
	 e.pos.x = final_x;
	 tb_x.Text = final_x.ToString(); // debug opcional

	 // Y
	 int dez_y = (int)Math.Round(pixels[3].r / 25.0);     // R = dezena × 25
	 int uni_y = (int)Math.Round(pixels[3].b / 25.0);     // B = unidade × 25
	 int dec_y = (int)Math.Round(pixels[3].g / 2.5);      // G = decimal × 2.5
	 int final_y = (dez_y * 10 + uni_y) * 100 + dec_y;    // Y = (dezena*10 + unidade)*100 + decimal
	 e.pos.y = final_y;
	 tb_y.Text = final_y.ToString(); // debug opcional


	 // PIXEL 4 - facing (yaw) em W e velocidade (spd)
	 if (pixels.Count &gt; 4) // verifica se o pixel 4 existe
	 {
		// yaw (em W)
		double yaw_raw = pixels[4].r * 360.0 / 256.0; // converte de byte para grau real
		e.facing = (int)Math.Round(yaw_raw);         // converte para W (milésimos de pi-rad)
		if (cb_debug.Checked) tb_yaw.Text = e.facing.ToString();

		// velocidade
		e.spd = 255 - pixels[4].g; // canal G invertido
		if (cb_debug.Checked) tb_spd.Text = e.spd.ToString();

		// leitura do canal B
		var b = pixels[4].b;
		int sform_cd = b &amp; 63;                    // bits 0–5 = cooldown da Stoneform (0–63)
		bool racial_up = (b &amp; 64) != 0;           // bit 6 = racial disponível
		bool furbolg = (b &amp; 128) != 0;            // bit 7 = buff Furbolg ativo

		if (cb_dwarf.Checked)                     // se for anão, usa racial como Stoneform
		 e.racialready = racial_up;

		e.furbolg_form = cb_furbolg.Checked &amp;&amp; furbolg; // só ativa se checkbox estiver marcada
	 }


	 // ----------------------------------------------
	 // combate, nadando e debuffs (pixel 5)
	 // ----------------------------------------------
	 if (pixels.Count &gt; 5)
	 {
		e.combat = pixels[5].r &gt; 250; // está em combate se vermelho alto
		cb_combat.Checked = e.combat; // atualiza checkbox na UI

		e.swim = pixels[5].g &gt; 250; // está se afogando se canal verde for 255

		int debuff_raw = pixels[5].b / 8; // extrai valor base dos debuffs (0–31)

		e.hascurse = (debuff_raw &amp; 1) != 0;   // bit 0 → Curse
		e.hasother = (debuff_raw &amp; 2) != 0;   // bit 1 → outro debuff (sem dispelType)
		e.haspoison = (debuff_raw &amp; 4) != 0;  // bit 2 → Poison
		e.hasdisease = (debuff_raw &amp; 8) != 0; // bit 3 → Disease
		e.hasmagic = (debuff_raw &amp; 16) != 0;  // bit 4 → Magic
	 }

	 // -------------------------------------
	 // Pixel 6: Player Level, Classe, Flags
	 // -------------------------------------
	 if (pixels.Count &gt; 6)
	 {
		int val = pixels[6].b; // canal B codifica flags

		// FLAGS DO PALADINO (bitfield)
		pala.bubble_cd = (val &amp; 128) &gt; 0;            // bolha disponível
		pala.exorcism_up = (val &amp; 64) &gt; 0; // true se exorcism está disponível
		pala.joj = (val &amp; 32) &gt; 0;             // mob com debuff JoJ
		pala.exorcism_range = (val &amp; 16) &gt; 0;             // exorcism em alcance
		//cb_exorange.Checked = pala.exorcism_range; // preenche a checkbox

		// LEVEL E CLASSE
		e.level = (int)Math.Round(pixels[6].r / 4.0);
		tb_level.Text = e.level.ToString();

		bool isPaladino = (pixels[6].g &gt;= 250) || true;
		tb_class.Text = isPaladino ? "Paladino" : "Outro";
		if (isPaladino) e.classe = 1;
	 }


	 // -------------------------------------
	 // Pixel 7: Target HP, Flags, Level
	 // -------------------------------------
	 if (pixels.Count &gt; 7)
	 {
		tar.hp = (pixels[7].r * 100) / 255;                // R: HP do alvo (%)
		tar.morreu = tar.hp == 0;                 // morreu se HP = 0
		tb_tarhp.Text = tar.hp.ToString();                 // mostra na textbox

		e.hastarget = (pixels[7].g &amp; 128) &gt; 0;             // G: bit 7 → existe target
		//tar.skinnable = (pixels[7].g &amp; 64) &gt; 0;            // G: bit 6 → skinável
		//if (tar.morreu &amp;&amp; me.hastarget) loga($"Target skinnable: {tar.skinnable}"); // debug 

		tar.level = (int)Math.Round(pixels[7].b / 4.0);    // B: level do target (×4)
		//loga($"Level do target: {e.level}"); // debug
		tb_tarlevel.Text = tar.level.ToString();           // mostra na textbox
	 }

	 // -------------------------------------
	 // Pixel 8: Livre (Radar)
	 // -------------------------------------
	 if (pixels.Count &gt; 8)
	 {
		// ainda não usado — radar será decodificado aqui depois
	 }

	 // -------------------------------------
	 // Pixel 9: Judgement (alcance, cooldown) + Auras + Melee range
	 // -------------------------------------
	 if (pixels.Count &gt; 9)
	 {
		// canal R → está em alcance
		pala.jud_range = (pixels[9].r &gt; 250);           // Judgement em alcance

		// canal G → cooldown restante (0–255)
		pala.judge_cd = pixels[9].g;                    // cooldown em segundos (cap 255)

		// canal B → decodifica bitflags de aura e melee range
		int b = pixels[9].b;                            // lê valor bruto (0–255)
		e.meleerange = (b &amp; 1) != 0;            // bit 0 = melee range
		pala.crusader = (b &amp; 2) != 0;            // bit 1 = Crusader Aura
		pala.devotion = (b &amp; 4) != 0;            // bit 2 = Devotion Aura
		pala.frost = (b &amp; 8) != 0;            // bit 3 = Frost Resist Aura
		pala.shadow = (b &amp; 16) != 0;            // bit 4 = Shadow Resist Aura
		pala.fire = (b &amp; 32) != 0;            // bit 5 = Fire Resist Aura
		pala.concentration = (b &amp; 64) != 0;            // bit 6 = Concentration Aura
		pala.retribution = (b &amp; 128) != 0;            // bit 7 = Retribution Aura

		cb_melee.Checked = e.meleerange;                // marca checkbox se em alcance físico
	 }


	 // Pixel 10: Cast do Player
	 // -------------------------------------
	 if (pixels.Count &gt; 10)
	 {
		e.casting = pixels[10].r &gt; 250;                           // está castando se canal R for 255
		e.castbar = (pixels[10].g * 100) / 255;                   // progresso em %
		e.spell = ((char)pixels[10].b).ToString();               // converte byte para letra
		e.spellid = 0;                                            // ainda não disponível

		tb_playercast.Text = me.casting ? me.spell : "-";         // exibe a letra da spell
		pb_playercast.Value = me.castbar;                         // atualiza progressbar (0-100)
	 }
	 
	 // Pixel 11: Cast do Target
	 // -------------------------------------
	 if (pixels.Count &gt; 11)
	 {
		tar.castbar = (pixels[11].g * 100) / 255;                  // progresso em %
		tar.casting = tar.castbar &gt; 0; // pixels[11].r &gt; 250;                          // está castando se canal R = 255

		tar.spell = ((char)pixels[11].b).ToString();              // converte byte p
																															// ara letra
		tar.spellid = 0;                                           // ainda não disponível

		tb_tarcast.Text = tar.casting ? tar.spell : "-";          // mostra spell no textbox
		pb_tarcast.Value = tar.castbar;                           // atualiza progressbar
	 }

	 // -------------------------------------
	 // Pixel 12: Seals ativos (R) + Judgements no target (G) + CD do Lay on Hands (B)
	 // -------------------------------------
	 if (pixels.Count &gt; 12)
	 {
		int ar = pixels[12].r; // R = bitmask dos seals ativos
		int ag = pixels[12].g; // G = bitmask dos judgements no target
		int ab = pixels[12].b; // B = cooldown do Lay on Hands (cap 255)

		// SEALS ATIVOS (true se bit correspondente estiver ligado)
		pala.sor = (ar &amp; 128) != 0; // Seal of Righteousness
		pala.sotc = (ar &amp; 64) != 0; // Seal of the Crusader
		pala.soc = (ar &amp; 4) != 0;   // Seal of Command
		pala.sol = (ar &amp; 16) != 0;  // Seal of Light
		pala.sow = (ar &amp; 8) != 0;   // Seal of Wisdom

		// JUDGEMENTS NO TARGET
		pala.jotc = (ag &amp; 64) != 0; // Judgement of the Crusader
		pala.joj = (ag &amp; 32) != 0; // Judgement of Justicew
		pala.jol = (ag &amp; 16) != 0; // Judgement of Light
		pala.jow = (ag &amp; 8) != 0; // Judgement of Wisdom

		// COOLDOWN
		pala.lay_cd = ab; // cooldown do Lay on Hands (0 a 255)
		
	 }

	 // -------------------------------------
	 // Pixel 13: Blessings ativos (R) + HoJ ready (G bit 7) + HoJ range (B)
	 // -------------------------------------
	 if (pixels.Count &gt; 13)
	 {
		int ar = pixels[13].r; // R = bitmask dos blessings ativos
		int ag = pixels[13].g; // G = bitflags de cooldowns (bit 7 = HoJ pronto)
		int ab = pixels[13].b; // B = 255 se HoJ está em alcance

		// BLESSINGS ATIVOS (bit por ordem nova)
		pala.bos = (ar &amp; 1) != 0; // bit 0 = Salvation
		pala.bol = (ar &amp; 2) != 0; // bit 1 = Light
		pala.bof = (ar &amp; 4) != 0; // bit 2 = Freedom
		pala.bow = (ar &amp; 8) != 0; // bit 3 = Wisdom
		pala.bop = (ar &amp; 16) != 0; // bit 4 = Protection
		pala.bok = (ar &amp; 32) != 0; // bit 5 = Kings
		pala.bom = (ar &amp; 64) != 0; // bit 6 = Might
		pala.bosanc = (ar &amp; 128) != 0; // bit 7 = Sanctuary

		// HAMMER OF JUSTICE
		pala.hoj_ready = (ag &amp; 128) != 0;        // está pronto
		pala.hoj_range = (ab &gt; 250);             // está em alcance
		cb_hammer_range.Checked = pala.hoj_range;
	 }

	 // Pixel 14: Creature Type
	 // -------------------------------------
	 if (pixels.Count &gt; 14)
	 {
		tar.type = pixels[14].r;               // lê valor bruto do canal R
		tb_tartype.Text = tar.type.ToString(); // exibe no textbox
	 }

	 // -------------------------------------
	 // Pixel 15: Mood (R/G) + Mob está me atacando? (B)
	 // -------------------------------------
	 if (pixels.Count &gt; 15)
	 {
		// mood / reação do target
		bool hostile = pixels[15].r &gt; 200 &amp;&amp; pixels[15].g &lt; 50;   // vermelho puro
		bool neutral = pixels[15].r &gt; 200 &amp;&amp; pixels[15].g &gt; 200;  // amarelo
		bool friendly = pixels[15].r &lt; 50 &amp;&amp; pixels[15].g &gt; 200;  // verde

		if (hostile) tar.mood = -1;
		else if (friendly) tar.mood = 1;
		else tar.mood = 0;

		tb_mood.Text = (tar.mood == -1) ? "Hostile" :
									 (tar.mood == 1) ? "Friendly" : "Neutral";

		// canal azul = 255 se o mob está me atacando (aggro confirmado)
		tar.aggroed = (pixels[15].b &gt; 250);         // reuse da propriedade para "aggro ativo"
	 }

	}</value>
  </data>
  <data name="tb_result.Text" xml:space="preserve">
    <value>Classe: Paladino

Buffs:
- Blessing of Wisdom [has]
- Redoubt [has, stacks]
- Holy Shield [has, stacks]

Debuffs:
- Sunder Armor [target, has, stacks]
- Shadow Vulnerability [target, has]
- Weakened Soul [player, has]

Spells:
- Hammer of Justice [ready, range, known]
- Holy Light [ready, range, known]
- Judgement [ready, range, known]
- Lay on Hands [ready, known]

Flags fixas: usar 16 pixels padrão</value>
  </data>
  <data name="textBox7.Text" xml:space="preserve">
    <value>--[[ 
INSTRUÇÕES GERAIS – MOSAIC ADDON CLASS EXTENSION

OBJETIVO:
Você irá gerar um código .LUA completo que expande o addon Mosaic v3.0, utilizando os pixels de 9 a 15 para codificar informações táticas específicas de uma classe do World of Warcraft Classic.

O resultado final deve ser um arquivo único em Lua, pronto para ser utilizado no jogo. O código base será fornecido em seguida.

ESTRUTURA DO ADDON:
O addon utiliza 16 pixels verticais (0 a 15), cada um com 3 canais RGB. Cada canal suporta até 8 flags binárias, codificadas por soma de potências de 2:
1, 2, 4, 8, 16, 32, 64, 128.

→ Pixels 0 a 8: já estão preenchidos com dados genéricos globais (vida, mana, combate, posição, etc).
→ Pixels 9 a 15: devem ser preenchidos por você com a lógica específica da classe informada.
Cada pixel deve ser utilizado até o limite (24 flags por pixel) antes de passar para o próximo.

O QUE VAI SER FORNECIDO NOS PRÓXIMOS PROMPTS:
1. O código base do addon Mosaic v3.0 (já funcional)
2. Um conjunto de funções auxiliares (toolkit) para facilitar sua lógica (ex: cdready, inrange, stackbits)
3. Exemplos prontos de como aplicar cada tipo de marcador ([has], [ready], [range], [stacks], etc)
4. As listas de buffs, debuffs e spells da classe alvo, com marcadores associados

O QUE VOCÊ DEVE FAZER:
Usar os dados fornecidos para gerar o código final em Lua, com:
- Aplicação correta dos marcadores por meio de bitflags binários
- Verificações seguras (ex: checar se spell existe antes de verificar range)
- Preenchimento dos pixels 9 a 15, canal por canal, até esgotar cada pixel
- Comentários claros em cada linha, explicando o que está sendo feito

Seu código deve ser completo e direto ao ponto. A lógica da classe deve ser aplicada fielmente, utilizando os métodos e padrões fornecidos.

A seguir, você receberá o código base do addon.
]]</value>
  </data>
  <data name="textBox4.Text" xml:space="preserve">
    <value>--[[ 
----------------------------------------------
ADDON MOSAIC BASE – V3.0
----------------------------------------------
Objetivo:
Desenha 16 pixels verticais com informações do jogador e do alvo,
válidas para qualquer classe. Nenhum dado específico de spell, buff
ou debuff de classe é incluído. Serve como base para expansão.

Codificação:
- RGB dos pixels codificam até 3 dados por linha
- Posição: canto inferior esquerdo da tela
- Atualização a cada 0.10s

Expansão:
A IA deve preencher os pixels 9 a 15 com lógica de classe.
Cada canal (R/G/B) comporta até 8 flags binárias, codificadas por
soma de potências de 2: 1, 2, 4, 8, 16, 32, 64, 128.
Stacks devem ser codificados diretamente como valores binários de 0 a 7.
]]
-- ------------------------------------
-- INICIALIZAÇÃO
-- ------------------------------------
local f = CreateFrame("Frame")
f:RegisterEvent("PLAYER_LOGIN")
f:SetScript("OnEvent", function() end)

-- ------------------------------------
-- CONFIGURAÇÃO DOS PIXELS
-- ------------------------------------
local base_y = 1
local passo = 4
local altura_pixel = 3
local altura_marcador = 1
local cor_marcador = {r = 230/255, g = 240/255, b = 250/255}
local pixels, marcadores = {}, {}

for i = 0, 15 do
	local px = CreateFrame("Frame", nil, UIParent</value>
  </data>
  <data name="textBox5.Text" xml:space="preserve">
    <value>-- -------------------------------------
-- PIXEL 13 – preenchido com spell flags
-- -------------------------------------
local r13, g13, b13 = 0, 0, 0

-- SPELL: ready (bits 0–2)
if cdready("Judgement")         then r13 = bit.bor(r13, 1) end -- bit 0
if cdready("Lay on Hands")      then r13 = bit.bor(r13, 2) end -- bit 1
if cdready("Holy Light")        then r13 = bit.bor(r13, 4) end -- bit 2

-- SPELL: range (bits 3–5)
if inrange("Judgement")         then r13 = bit.bor(r13, 8) end  -- bit 3
if inrange("Hammer of Justice") then r13 = bit.bor(r13, 16) end -- bit 4
if inrange("Holy Light")        then r13 = bit.bor(r13, 32) end -- bit 5

-- SPELL: known (bits 6–7)
if known("Holy Light")          then r13 = bit.bor(r13, 64) end  -- bit 6
if known("Hammer of Justice")   then r13 = bit.bor(r13, 128) end -- bit 7

-- agora canal G
-- BUFF: has (bits 0–4) (Seals + Blessings)
for i = 1, 40 do
	local name = UnitBuff("player", i)
	if not name then break end
	if name:find("Seal of Righteousness") then g13 = bit.bor(g13, 1) end -- bit 0
	if name:find("Seal of Wisdom")        then g13 = bit.bor(g13, 2) end -- bit 1
	if name:find("Seal of Light")         then g13 = bit.bor(g13, 4) end -- bit 2
	if name:find("Blessing of Might")     then g13 = bit.bor(g13, 8) end -- bit 3
	if name:find("Blessing of Wisdom")    then g13 = bit.bor(g13, 16) end -- bit 4
end

-- ainda sobram bits no canal G (5,6,7)... vamos deixar livre

-- canal B – debuff em target (has + stacks)
for i = 1, 40 do
	local name, _, _, count = UnitDebuff("target", i)
	if name == "Sunder Armor" then
		b13 = bit.bor(b13, 1) -- bit 0 = has
		b13 = bit.bor(b13, stackbits(count) * 2) -- bits 1–3 = stacks (ajustado)
	end
end

pixels[13].texture:SetColorTexture(r13 / 255, g13 / 255, b13 / 255)

-- -------------------------------------
-- PIXEL 14 – exemplo com debuff em si mesmo
-- -------------------------------------
local r14 = 0
for i = 1, 40 do
	local name = UnitDebuff("player", i)
	if name == "Weakened Soul" then
		r14 = bit.bor(r14, 1) -- bit 0 = presente no player
		break
	end
end
pixels[14].texture:SetColorTexture(r14 / 255, 0, 0)</value>
  </data>
  <data name="textBox6.Text" xml:space="preserve">
    <value>-- ------------------------------------------
-- FUNÇÕES UTILITÁRIAS PARA ADDON MOSAIC
-- ------------------------------------------

-- verifica se uma spell está pronta (sem cooldown)
function cdready(name)
	local s, d, e = GetSpellCooldown(name)       -- s = start, d = duration, e = enabled
	return e == 1 and (s == 0 or d == 0)          -- cooldown pronto se sem duração ou expirado
end

-- verifica se uma spell está no alcance do target
function inrange(name)
	if not UnitExists("target") then return false end
	if not IsSpellInRange(name, "target") then return false end
	return IsSpellInRange(name, "target") == 1    -- retorna true se no alcance
end

-- verifica se a spell está conhecida (presente no spellbook)
function known(name)
	local i, b = 1, true
	while b do
		local spell = GetSpellBookItemName(i, "spell")
		if not spell then break end
		if spell == name then return true end
		i = i + 1
	end
	return false                                  -- retorna false se não achou no spellbook
end

-- codifica stacks de debuff como valor direto de 0 a 7 (3 bits)
function stackbits(n)
	return math.min(n or 0, 7)                    -- limita entre 0 e 7 (binário 000 a 111)
end

-- ------------------------------------------
-- EXEMPLOS DE USO DE CADA FUNÇÃO
-- ------------------------------------------

if cdready("Judgement") then log("Judgement pronto") end           -- exemplo cdready
if inrange("Judgement") then log("Target no alcance do Judgement") end -- exemplo inrange
if known("Holy Light") then log("Holy Light é conhecido") end      -- exemplo known

local sunder = 5                                   -- exemplo stackbits
local cod = stackbits(sunder)                      -- codifica 5 stacks
log("Sunder codificado em 3 bits: " .. cod)</value>
  </data>
  <data name="textBox8.Text" xml:space="preserve">
    <value>Você irá criar uma classe de status de personagem, inspirada no exemplo abaixo (palatable, para paladino).
O nome da nova classe deve seguir o padrão [nome da classe]table, tudo em minúsculo (ex: warriortable, magetable).

📌 Regras de construção:
Cada campo da classe representa um status binário (bool) ou numérico (int de 0 a 255).

Agrupe os campos por categoria:

Auras (bool): se a aura está ativa

Blessings/Buffs (bool): se o buff está ativo

Seals ou habilidades exclusivas (bool): se está ativo

Cooldowns: use bool para pronto (ready) ou int para duração restante

Debuffs em target: use bool para ativo

Range: bool para se está em alcance

Sempre use nomes curtos e minúsculos. Evite qualquer forma de PascalCase ou nomes longos.

Os campos devem refletir os dados fornecidos pelo usuário (ex: lista de buffs, debuffs, spells com [ready], [range], [known]).

// --------------------------------
// CLASSE PALATABLE - STATUS DO PALADINO
// --------------------------------
public class palatable
{
	// AURAS ATIVAS
	public bool devotion;        
	public bool retribution;     
	public bool concentration;   
	public bool fire;            
	public bool frost;           
	public bool shadow;          
	public bool crusader;        

	// BLESSINGS
	public bool bom;             // Blessing of Might
	public bool bow;             // Blessing of Wisdom
	public bool bok;             // Blessing of Kings
	public bool bos;             // Blessing of Salvation
	public bool bol;             // Blessing of Light
	public bool bof;             // Blessing of Freedom
	public bool bop;             // Blessing of Protection
	public bool bosanc;          // Blessing of Sanctuary

	// SEALS
	public bool sor;             // Seal of Righteousness
	public bool soc;             // Seal of Command
	public bool sow;             // Seal of Wisdom
	public bool sol;             // Seal of Light
	public bool sotc;            // Seal of the Crusader

	// COOLDOWNS
	public bool hoj_ready;       // Hammer of Justice pronto
	public int judge_cd;         // Tempo restante do Judgement
	public int lay_cd;           // Tempo restante do Lay on Hands
	public bool bubble_cd;       // Divine Shield disponível?
	public int dp_cd;            // Divine Protection
	public bool exorcism_up;     // Exorcism disponível?

	// DEBUFFS NO TARGET
	public bool joj;             // Judgement of Justice
	public bool jol;             // Judgement of Light
	public bool jow;             // Judgement of Wisdom
	public bool jotc;            // Judgement of the Crusader

	// RANGE CHECKS
	public bool jud_range;       
	public bool hoj_range;       
	public bool exorcism_range;  

	// ESTADOS DEFENSIVOS
	public bool defseal;         
	public bool defbless;        
	public bool defaura;         
	public bool nomana;          
}</value>
  </data>
  <data name="textBox9.Text" xml:space="preserve">
    <value>Você vai criar uma struct chamada element que representa qualquer entidade no jogo (jogador, mob, NPC), tanto para o player (me) quanto para o alvo (tar).

Essa estrutura será usada pelo bot para armazenar dados básicos de estado, extraídos dos pixels do addon LUA.

📌 Regras de construção:
Nome da struct: element (tudo minúsculo)

Os campos devem ser curtos, todos em minúsculo

Não use nomes compostos longos ou camelCase

Tipos: int (0–100, 0–255 ou escala discreta) e bool (true/false)

A struct será usada por dois objetos fixos: me e tar

Cada campo reflete uma informação já disponível nos pixels do addon base

🧠 Campos obrigatórios:
Divida os campos em categorias como no exemplo. Siga esta lógica:

📍 Posição e direção
pos: struct loc com X e Y (já existente)

facing: ângulo atual

spd: velocidade atual

❤️ Status de vida e mana
hp: porcentagem de vida (0–100)

mana: porcentagem de mana (0–100)

🧠 Identidade e combate
level: nível

classe: código da classe

type: tipo da criatura (1 = player, 2 = mob, etc.)

combat: está em combate?

morreu: está morto?

mood: -1 hostil, 0 neutro, 1 amigável

🎒 Outras flags
humanoid: é humanóide?

hastarget: tem target ativo?

autoattack: está com autoattack ativo?

freeslots: espaços livres na mochila

haspoison, hasmagic, hascurse, hasdisease: debuffs ativos

wrongway: está virado na direção errada

outofrange: está fora de alcance (corpo a corpo ou spell)

swim: está nadando

aggroed: está com ameaça ativa em mim

skinnable: pode ser skinnado?

furbolg_form: está com buff de transformação em furbolg?

🔮 Casting (opcional mas útil)
casting: está castando?

spell: nome parcial da spell

castbar: progresso da castbar (0–100)

// --------------------------------
// STRUCT ELEMENT – REPRESENTA QUALQUER ENTIDADE NO MAPA
// --------------------------------
public struct element
{
	public loc pos;         // posição atual
	public int hp;          // vida (0–100)
	public int mana;        // mana (0–100)
	public int spd;         // velocidade
	public int facing;      // ângulo de visão
	public int level;       // nível
	public int type;        // tipo de criatura (1=player, 2=mob, etc.)
	public bool combat;     // em combate
	public bool morreu;     // está morto
	public int mood;        // -1 = hostil, 0 = neutro, 1 = amigável

	public bool humanoid;   // é humanóide
	public int classe;      // código da classe
	public bool hastarget;  // tem target ativo?
	public bool autoattack; // autoattack ativo?
	public int freeslots;   // slots livres na mochila

	public bool haspoison;
	public bool hasmagic;
	public bool hascurse;
	public bool hasdisease;

	public bool wrongway;     // está virado errado
	public bool outofrange;   // fora de alcance
	public bool swim;         // nadando
	public bool aggroed;      // está com aggro
	public bool skinnable;    // pode ser skinnado
	public bool furbolg_form; // está com transformação de furbolg?

	// --- casting ---
	public bool casting;    // está castando?
	public string spell;    // nome da spell (ou letra inicial)
	public int castbar;     // progresso do cast (0–100)
}</value>
  </data>
</root>